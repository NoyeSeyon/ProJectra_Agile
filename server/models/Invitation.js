const mongoose = require('mongoose');

const invitationSchema = new mongoose.Schema({
  token: {
    type: String,
    required: false, // Will be generated by pre-save middleware
    unique: true,
    default: function() {
      const crypto = require('crypto');
      return crypto.randomBytes(32).toString('hex');
    }
  },
  organization: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Organization',
    required: true
  },
  invitedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  email: {
    type: String,
    required: true,
    lowercase: true,
    trim: true
  },
  role: {
    type: String,
    enum: ['admin', 'project_manager', 'team_leader', 'member', 'client', 'guest'],
    default: 'member'
  },
  status: {
    type: String,
    enum: ['pending', 'accepted', 'expired', 'cancelled'],
    default: 'pending'
  },
  expiresAt: {
    type: Date,
    required: true,
    default: () => new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days
  },
  acceptedAt: {
    type: Date,
    default: null
  },
  acceptedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    default: null
  },
  metadata: {
    firstName: String,
    lastName: String,
    message: String // Optional message from inviter
  }
}, {
  timestamps: true
});

// Indexes
invitationSchema.index({ token: 1 });
invitationSchema.index({ organization: 1 });
invitationSchema.index({ email: 1 });
invitationSchema.index({ status: 1 });
invitationSchema.index({ expiresAt: 1 });

// Virtual for expiration status
invitationSchema.virtual('isExpired').get(function() {
  return this.expiresAt < new Date();
});

// Virtual for is valid
invitationSchema.virtual('isValid').get(function() {
  return this.status === 'pending' && !this.isExpired;
});

// Methods
invitationSchema.methods.accept = function(userId) {
  this.status = 'accepted';
  this.acceptedAt = new Date();
  this.acceptedBy = userId;
  return this.save();
};

invitationSchema.methods.expire = function() {
  this.status = 'expired';
  return this.save();
};

invitationSchema.methods.cancel = function() {
  this.status = 'cancelled';
  return this.save();
};

// Static method to generate unique token
invitationSchema.statics.generateToken = function() {
  const crypto = require('crypto');
  return crypto.randomBytes(32).toString('hex');
};

// Static method to find valid invitation
invitationSchema.statics.findValidInvitation = function(token, email) {
  return this.findOne({
    token,
    email: email.toLowerCase(),
    status: 'pending',
    expiresAt: { $gt: new Date() }
  }).populate('organization', 'name slug').populate('invitedBy', 'firstName lastName');
};

// Pre-save middleware to generate token if not provided
invitationSchema.pre('save', function(next) {
  if (!this.token) {
    const crypto = require('crypto');
    this.token = crypto.randomBytes(32).toString('hex');
  }
  next();
});

module.exports = mongoose.model('Invitation', invitationSchema);
